import type { Route } from "../+types/root";

export default function useGetContent({ params }: Route.ComponentProps) {
  const isContentCached = localStorage.getItem("isContentCached");
  if (isContentCached === "true") {
  } else {
    // execute get request to server and save to local cache

    fetch(
      (import.meta.env.DEV
        ? import.meta.env.VITE_BK_SRV_DEV
        : import.meta.env.VITE_BK_SRV_PROD) +
        "/api/" +
        params.postType +
        "/posts",
      {
        headers: {
          Authorization: "Bearer " + account?.idToken,
        },
      }
    )
      .then(async (response) => {
        let data = await response.json();
        localStorage.setItem("isCached", "true");
        data = Array.from(data);

        console.log(typeof data);
        Object.keys(data).map(async (key) => {
          await db.content
            .add(data[key])
            .then(() => {
              console.log("Done");
            })
            .catch((error) => {
              console.log(error);
            });
        });
        setData({ inProgress: false, content: data, error: "" });
      })
      .catch((error) => {
        console.log("Error " + error);
        setData((preData) => ({
          ...preData,
          inProgress: false,
          error: error,
        }));
      });
  }
}
